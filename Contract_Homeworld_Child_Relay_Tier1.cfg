CONTRACT_TYPE
{
    name = SAB_Homeworld_Child_Relay_Tier1

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a tier 1 relay around @targetBody.
    genericTitle = Launch a tier 1 relay around homeworld moon.
    synopsis = We want you to build a new relay satellite with at least @StockAntennaBalance:relayPowerTier1 G power (such as the HG-5R or HG-55R antenna) and place it into stationary orbit around @targetBody.
    completedMessage = Success! The relay satellite is up and running around @targetBody.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    minExpiry = 5.0
    maxExpiry = 10.0
    deadline = Random(100,150) // days
    prestige = Trivial

    maxCompletions = 4
    maxSimultaneous = 1

    rewardScience = 0.0
    rewardReputation = 10.0
    rewardFunds = 48000.0 // overbuilt vessel is about 36k
    failureReputation = 2.0
    failureFunds = 10000.0
    advanceFunds = 18000.0

    targetBody = HomeWorld().Children().Random()

    //DATA
    //{
    //    //TODO: Use this some day to find vessels
    //    // https://github.com/jrossignol/ContractConfigurator/wiki/HasAntenna-Parameter
    //    type = List<Vessel>
	//	requiredValue = false
    //    relayVessels = AllVessels().Where(v => (v.VesselType() == Relay) && (v.CelestialBody() == @targetBody) && (v.IsOrbiting()))
    //}

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 15d

        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
            // Default:   Launch a new vessel
            title = Launch a new relay satellite
        }

        PARAMETER
        {
            name = HasResourceCapacityEC
            type = HasResourceCapacity

            // Default:   Resource: <resource>: <quantity_description>
            title = Have at least @minQuantity electric charge (EC) storage

            resource = ElectricCharge
            minQuantity = 1200.0
            // maxQuantity = 1000.0
        }

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

//        PARAMETER
//        {
//            name = PartValidationAntenna
//            type = PartValidation
//
//            // has either of the following
//            part = HighGainAntenna5
//            part = SYB_Squad_HighGainAntenna
//        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            title = Have at least @StockAntennaBalance:relayPowerTier1 G (combined) relay antenna power
            antennaType = RELAY
            minAntennaPower = @StockAntennaBalance:relayPowerTier1 * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @../HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            title = Reach orbit with minimal deviation
            displayNotes = true
            index = 0
            deviationWindow = @StockAntennaBalance:deviationWindow
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState
            title = Must not be under acceleration
            maxAcceleration = 0.1
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // targetBody = Kerbin
            type = EQUATORIAL
            // altitudeFactor = 0.8

            // ignored for EQUATORIAL, POLAR and STATIONARY.
            inclinationFactor = 0.8

            // The eccentricity of the orbit.  Ignored for all but SYNCHRONOUS.
            eccentricity = 0.0

            deviationWindow = @StockAntennaBalance:deviationWindow
        }
    }

    REQUIREMENT // must have already orbited the base targetBody
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        targetBody = HomeWorld()
    }

    REQUIREMENT // must be able to research or have researched tech
    {
        name = CanResearchTech1
        type = CanResearchTech
        tech = basicScience
    }
}