CONTRACT_TYPE
{
    name = SAB_InnerPlanet_Relay_Tier2

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a @StockAntennaBalance:relayPowerTier2 G power relay around @targetBody.
    genericTitle = Launch a @StockAntennaBalance:relayPowerTier2 G power relay around an inner planet.
    synopsis = We want you to build a new relay satellite with at least @StockAntennaBalance:relayPowerTier2 G power (such as two of the RA-2) and place it into stationary orbit around @targetBody.
    completedMessage = Success! The relay satellite is up and running around @targetBody.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    minExpiry = 60.0
    maxExpiry = 120.0
    deadline = Random(5 * 426, 8 * 426) // days
    prestige = Trivial

    //maxCompletions = 4 // see HaveFewerThanNRelays which is a better way to limit quantity
    maxSimultaneous = 2

    rewardScience = 0.0
    failureReputation = Random(12,18)
    rewardReputation = Random(4,6)
    failureFunds = Random(75000,95000)
    advanceFunds = Random(60000,75000)
    rewardFunds = Random(180000,210000)

    targetBody = @validBodies.Random()

    DATA
    {
        type = List<CelestialBody>
        title = Get list of target bodies
        validBodies = AllBodies().Where(cb => cb.SemiMajorAxis() < @/innerOuterSmaBoundary && cb.IsPlanet() && !cb.IsHomeWorld())
    }

    DATA
    {
        type = double
        title = Figure out inner/outer boundary for planets
        innerOuterSmaBoundary = HomeWorld().SemiMajorAxis() * 2
    }

    DATA
    {
        // https://github.com/jrossignol/ContractConfigurator/wiki/HasAntenna-Parameter
        // https://github.com/jrossignol/ContractConfigurator/wiki/Vessel-Type
        type = double
		requiredValue = false
        existingRelayVesselQty = AllVessels().Where(v => (v.VesselType() == Relay) && (v.CelestialBody() == @targetBody) && (v.IsOrbiting() && (v.AntennaRelayPower() >= @/MyVesselParameterGroup/AntennaRelayPower/minAntennaPower))).Count()
    }

    PARAMETER
    {
        name = MyVesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 120d

        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
            // Default:   Launch a new vessel
            title = Launch a new relay satellite
        }

        PARAMETER
        {
            name = HasResourceCapacityEC
            type = HasResourceCapacity

            // Default:   Resource: <resource>: <quantity_description>
            title = Have at least @minQuantity electric charge (EC) storage

            resource = ElectricCharge
            minQuantity = 800.0 // bit of a guess
            // maxQuantity = 1000.0
        }

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            title = Have at least @StockAntennaBalance:relayPowerTier2 G (combined) relay antenna power
            antennaType = RELAY
            minAntennaPower = @StockAntennaBalance:relayPowerTier2 * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @../HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            title = Reach orbit with minimal deviation
            displayNotes = true
            index = 0
            deviationWindow = @StockAntennaBalance:deviationWindow
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState
            title = Must not be under acceleration
            maxAcceleration = 0.2
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // targetBody = (defaults to contract targetBody)
            type = RANDOM
            altitudeFactor = 0.9
            inclinationFactor = 1.0
            eccentricity = 0.0

            deviationWindow = @StockAntennaBalance:deviationWindow
        }
    }

    REQUIREMENT
    {
        name = HaveFewerThanNRelays
        type = Expression
        title = Have at most 3 relays in orbit around target
        expression = @/existingRelayVesselQty < 3
    }


    REQUIREMENT // must have already orbited the home world
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        targetBody = HomeWorld()
    }

    REQUIREMENT // must be able to research or have researched tech
    {
        name = CanResearchTech1
        type = CanResearchTech
        tech = precisionEngineering // RA-2
    }

    REQUIREMENT
    {
        name = FoundPlanet
        type = Expression
        title = Found at least one target planet
        expression = @/validBodies.Count() > 0
    }

    REQUIREMENT
    {
        name = Any
        type = Any
        title = Have completed at least one tier 2, 3 or 4 home world polar/tundra/kolniya contracts

        REQUIREMENT
        {
            name = HaveCompletedPolarTier2
            type = CompleteContract
            title = Have completed home world tier 3 polar relay contract
            contractType = SAB_Homeworld_PolarRelay_Tier2
        }
        REQUIREMENT
        {
            name = HaveCompletedPolarTier3
            type = CompleteContract
            title = Have completed home world tier 3 polar relay contract
            contractType = SAB_Homeworld_PolarRelay_Tier3
        }
        REQUIREMENT
        {
            name = HaveCompletedKolniyaTier3
            type = CompleteContract
            title = Have completed home world tier 3 kolniya relay contract
            contractType = SAB_Homeworld_Relay_Tier3k
        }
        REQUIREMENT
        {
            name = HaveCompletedTundraTier3
            type = CompleteContract
            title = Have completed home world tier 3 tundra relay contract
            contractType = SAB_Homeworld_Relay_Tier3t
        }
        REQUIREMENT
        {
            name = HaveCompletedPolarTier4
            type = CompleteContract
            title = Have completed home world tier 4 polar relay contract
            contractType = SAB_Homeworld_PolarRelay_Tier4
        }
    }
}