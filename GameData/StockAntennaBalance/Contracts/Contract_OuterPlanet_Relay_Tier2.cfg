CONTRACT_TYPE
{
    name = SAB_OuterPlanet_Relay_Tier2

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a tier 2+ relay around @targetBody.
    genericTitle = Launch a tier 2 relay around an outer planet.
    synopsis = We want you to build a new relay satellite with at least @StockAntennaBalance:relayPowerTier2 G power (such as the RA-2 antenna) and place it into stationary orbit around @targetBody.
    completedMessage = Success! The relay satellite is up and running around @targetBody.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    minExpiry = 5.0
    maxExpiry = 90.0
    deadline = Random(3.5 * 426, 4.5 * 426) * @/smaRatio67 // days
    prestige = Trivial

    //maxCompletions = 4 // see HaveFewerThanNRelays which is a better way to limit quantity
    maxSimultaneous = 6

    rewardScience = 0.0
    failureReputation = Random(6,9)
    rewardReputation = Random(12,18)
    failureFunds = Random(40000,50000) * @/smaRatioCubeRoot
    advanceFunds = Random(60000,75000) * @/smaRatioCubeRoot
    rewardFunds = Random(170000,200000) * @/smaRatio45

    targetBody = @validBodies.Random()

    DATA
    {
        type = List<CelestialBody>
        title = Get list of target bodies
        validBodies = AllBodies().Where(b => b.SemiMajorAxis() > @/homeworldSma && b.IsPlanet() && !b.IsHomeWorld())
    }

    DATA
    {
        type = double
        title = calculations for SMAs
        // Kerbin SMA = 13.6 Gm
        // Jool SMA = 68.8 Gm (about 5.06x, 2.50 sqrt, 1.72 cube)
        // Eeloo SMA = 90.1 Gm (about 6.6x, 2.57 sqrt, 1.88 cube)
        // Sarnus SMA = 126 Gm (9.26x, 3.04 sqrt, 2.10 cube)
        // Urlum SMA = 254 Gm (18.7x, 4.32 sqrt, 2.65 cube)
        // Neidon SMA = 409 Gm (about 30.1x, 5.48 sqrt, 3.11 cube)
        // Plock SMA = 536 Gm (39.4x, 6.28 sqrt, 3.40 cube)
        homeworldSma = HomeWorld().SemiMajorAxis()
        smaRatio = @targetBody.SemiMajorAxis() / @/homeworldSma
        smaRatio67 = Pow(@/smaRatio, 6/7)
        smaRatio45 = Pow(@/smaRatio, 4/5)
        smaRatio34 = Pow(@/smaRatio, 3/4)
        smaRatioSqrt = Pow(@/smaRatio, 1/2)
        smaRatioCubeRoot = Pow(@/smaRatio, 1/3)
    }

    DATA
    {
        // https://github.com/jrossignol/ContractConfigurator/wiki/HasAntenna-Parameter
        // https://github.com/jrossignol/ContractConfigurator/wiki/Vessel-Type
        type = double
        existingRelayVesselQty = AllVessels().Where(v => (v.VesselType() == Relay) && (v.CelestialBody() == @targetBody) && (v.IsOrbiting() && (v.AntennaRelayPower() >= @/MyVesselParameterGroup/AntennaRelayPower/minAntennaPower))).Count()
    }

    PARAMETER
    {
        name = MyVesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 180d

        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
            // Default:   Launch a new vessel
            title = Launch a new relay satellite
        }

        PARAMETER
        {
            name = HasResourceCapacityEC
            type = HasResourceCapacity

            // Default:   Resource: <resource>: <quantity_description>
            title = Have at least @minQuantity electric charge (EC) storage

            resource = ElectricCharge
            minQuantity = 4000.0 // bit of a guess
            // maxQuantity = 1000.0
        }

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            title = Have at least @StockAntennaBalance:relayPowerTier2 G (combined) relay antenna power
            antennaType = RELAY
            minAntennaPower = @StockAntennaBalance:relayPowerTier2 * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @../HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            title = Reach orbit with minimal deviation
            displayNotes = true
            index = 0
            deviationWindow = @StockAntennaBalance:deviationWindow
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState
            title = Must not be under acceleration
            maxAcceleration = 0.2
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // targetBody = (defaults to contract targetBody)
            type = RANDOM
            altitudeFactor = 0.9
            inclinationFactor = 1.0
            eccentricity = 0.0

            deviationWindow = @StockAntennaBalance:deviationWindow
        }
    }

    REQUIREMENT
    {
        name = HaveFewerThanNRelays
        type = Expression
        title = Have fewer then 3 relays in orbit around target
        expression = @/existingRelayVesselQty < 3
    }

    REQUIREMENT
    {
        name = HaveCompleted
        type = Expression
        title = Have completed at least 3 home polar relay contracts
        expression = $CCSABHomePolarRelay >= 3
    }

    REQUIREMENT // must have already orbited the home world
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        targetBody = HomeWorld()
    }

    REQUIREMENT // must be able to research or have researched tech
    {
        name = CanResearchTech1
        type = CanResearchTech
        tech = precisionEngineering // RA-2
    }

    REQUIREMENT
    {
        name = FoundOuterPlanet
        type = Expression
        title = Found at least one outer planet
        expression = @/validBodies.Count() > 0
    }

    REQUIREMENT
    {
        name = Any
        type = Any
        title = Have completed at least one tier 3 or 4 home world polar contracts

        REQUIREMENT
        {
            name = HaveCompletedPolarTier3
            type = CompleteContract
            title = Have completed home world tier 3 polar relay contract
            contractType = SAB_Homeworld_PolarRelay_Tier3
        }
        REQUIREMENT
        {
            name = HaveCompletedPolarTier3
            type = CompleteContract
            title = Have completed home world tier 4 polar relay contract
            contractType = SAB_Homeworld_PolarRelay_Tier4
        }
    }
}