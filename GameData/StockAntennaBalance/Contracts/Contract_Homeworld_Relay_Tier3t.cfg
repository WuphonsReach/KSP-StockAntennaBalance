CONTRACT_TYPE
{
    name = SAB_Homeworld_Relay_Tier3t

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a @StockAntennaBalance:relayPowerTier3 G power Tundra relay around @StockAntennaBalance:homeworld.
    synopsis = We want you to build a new relay satellite with at least @StockAntennaBalance:relayPowerTier3 G power and place it into a Tundra orbit around @StockAntennaBalance:homeworld.
    completedMessage = Success! The relay satellite is up and running around @StockAntennaBalance:homeworld.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    // minExpiry = 5.0
    // maxExpiry = 100.0
    deadline = Random(450,600) // days
    prestige = Trivial

    maxCompletions = 2
    maxSimultaneous = 1

    rewardScience = 0.0
    failureReputation = Random(10,15)
    rewardReputation = Random(4,6)
    failureFunds = Random(190000,225000)
    advanceFunds = Random(100000,120000)
    rewardFunds = Random(450000,550000)

    targetBody = @StockAntennaBalance:homeworld

    PARAMETER
    {
        name = MyVesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 30d

        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = NewVessel
            type = NewVessel
            // Default:   Launch a new vessel
            title = Launch a new relay satellite
        }

        PARAMETER
        {
            name = HasResourceCapacityEC
            type = HasResourceCapacity

            // Default:   Resource: <resource>: <quantity_description>
            title = Have at least @minQuantity electric charge (EC) storage

            resource = ElectricCharge
            minQuantity = 180.0
            // maxQuantity = 1000.0
        }

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            title = Have at least @StockAntennaBalance:relayPowerTier3 G (combined) relay antenna power
            antennaType = RELAY
            minAntennaPower = @StockAntennaBalance:relayPowerTier3 * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @../HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            title = Reach orbit with minimal deviation
            displayNotes = true
            index = 0
            deviationWindow = @StockAntennaBalance:deviationWindowStationary
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState
            title = Must not be under acceleration
            maxAcceleration = 0.5
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // targetBody = Kerbin
            type = TUNDRA
            altitudeFactor = 0.01

            // ignored for EQUATORIAL, POLAR and STATIONARY.
            inclinationFactor = 0.8

            // The eccentricity of the orbit.  Ignored for all but SYNCHRONOUS.
            //eccentricity = 0.0

            deviationWindow = @StockAntennaBalance:deviationWindowStationary
        }
    }

    BEHAVIOUR
    {
        name = TrackCompletions
        type = Expression
        CONTRACT_COMPLETED_SUCCESS
        {
            // Multiple expressions may be supplied in one node
            CCSABHomeTundraKolniyaRelay = $CCSABHomeTundraKolniyaRelay + 1
        }
    }

    REQUIREMENT // must have already orbited the base targetBody
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        // targetBody = Kerbin (defaults to the contract body)
    }

    REQUIREMENT // must have researched tech
    {
        name = TechResearched
        type = TechResearched
        tech = electronics // RA-15
    }
}