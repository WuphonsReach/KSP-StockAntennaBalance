CONTRACT_TYPE
{
    name = SAB_Homeworld_PolarRelay_Tier2

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a polar tier 2 relay around @StockAntennaBalance:homeworld.
    synopsis = We want you to build a new relay satellite with at least @/minAntennaPowerG G power (such as the RA-2 antenna) and place it into polar orbit around @StockAntennaBalance:homeworld.
    completedMessage = Success! The relay satellite is up and running around @StockAntennaBalance:homeworld.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    // minExpiry = 5.0
    // maxExpiry = 100.0
    deadline = 150 // days
    prestige = Trivial

    maxCompletions = 2
    maxSimultaneous = 1

    rewardScience = 0.0
    rewardReputation = 15.0
    rewardFunds = 72000.0 // overbuilt vessel is about 36k
    failureReputation = 4.0
    failureFunds = 20000.0
    advanceFunds = 24000.0

    targetBody = @StockAntennaBalance:homeworld

    DATA
    {
        type = List<Vessel>
		requiredValue = false
        relayVessels = AllVessels().Where(v => (v.VesselType() == Relay) && (v.CelestialBody() == @targetBody) && (v.IsOrbiting()))
    }

    DATA
    {
        type = double
        requiredValue = true
        minAntennaPowerG = 40
    }

    DATA
    {
        type = double
        requiredValue = true
        deviationWindow = 0.1
    }

    PARAMETER
    {
        name = NewVessel
        type = NewVessel
        // Default:   Launch a new vessel
        title = Launch a new relay satellite
    }

    PARAMETER
    {
        name = HasResourceCapacityEC
        type = HasResourceCapacity

        // Default:   Resource: <resource>: <quantity_description>
        title = Have at least @minQuantity electric charge (EC) storage

        resource = ElectricCharge
        minQuantity = 4800.0 // assumes 3.5 EC/sec @ 3000km Ap/Pe + 10%
        // maxQuantity = 1000.0
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 15d

        dissassociateVesselsOnContractCompletion = true
        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            antennaType = RELAY
            minAntennaPower = @/minAntennaPowerG * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @/HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            displayNotes = true
            index = 0
            deviationWindow = @/deviationWindow
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            maxAcceleration = 0.1 // Must be not under thrust
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        FIXED_ORBIT
        {
            ORBIT
            {
                SMA = 38145000 // Pe 90km Ap 75000 km -- (Ap km + Pe km + 1200) * 500
                ECC = 0.9
                INC = 88
                LPE = 270.690311604893
                LAN = 1.93635924563296
                MNA = 1.55872660382504
                EPH = 31.3999999999994
                REF = 1 // gets overriden by targetBody
            }

            // targetBody = Kerbin
            type = STATIONARY
            // altitudeFactor = 0.8

            // ignored for EQUATORIAL, POLAR and STATIONARY.
            inclinationFactor = 0.8

            // The eccentricity of the orbit.  Ignored for all but SYNCHRONOUS.
            eccentricity = 0.0

            deviationWindow = @/deviationWindow
        }
    }

    BEHAVIOUR
    {
        name = TrackCompletions
        type = Expression
        CONTRACT_COMPLETED_SUCCESS
        {
            // Multiple expressions may be supplied in one node
            CCSABHomePolarRelay = $CCSABHomePolarRelay + 1
        }
    }

    REQUIREMENT // must have already orbited the base targetBody
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        // targetBody = Kerbin (defaults to the contract body)
    }

    REQUIREMENT
    {
        name = AtLeastOneCompleted
        type = Any
        title = Complete at least two stationary contracts
        
        REQUIREMENT
        {
            name = CompleteContract_KEORelay1
            type = CompleteContract
            contractType = Homeworld_Relay_Tier1
            // minCount = 1
            // cooldownDuration = 15d
        }
        REQUIREMENT
        {
            name = CompleteContract_KEORelay2
            type = CompleteContract
            contractType = Homeworld_Relay_Tier2
            // minCount = 1
            // cooldownDuration = 15d
        }
        REQUIREMENT
        {
            name = CompleteContract_KEORelay3
            type = CompleteContract
            contractType = Homeworld_Relay_Tier3
            // minCount = 1
            // cooldownDuration = 15d
        }
        REQUIREMENT
        {
            name = CompleteContract_KEORelay4
            type = CompleteContract
            contractType = Homeworld_Relay_Tier4
            // minCount = 1
            // cooldownDuration = 15d
        }
    }

    REQUIREMENT // must be have researched tech
    {
        name = TechResearched
        type = TechResearched
        tech = precisionEngineering // RA-2
    }

    REQUIREMENT
    {
        name = AllHigherTechsNotYetResearched
        type = All
        title = No higher level relay antennas are unlocked

        REQUIREMENT
        {
            name = TechNotYetResearchedRA15
            type = TechResearched
            invertRequirement = true
            tech = electronics // RA-15 unlocked
        }
        REQUIREMENT
        {
            name = TechNotYetResearchedRA100
            type = TechResearched
            invertRequirement = true
            tech = automation // RA-100 unlocked
        }
    }
}