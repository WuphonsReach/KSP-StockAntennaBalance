CONTRACT_TYPE
{
    name = SYBSAB_KEO_HG5R

    title = Launch stationary relay satellite around @/homeworld
    synopsis = We want you to build a new communications satellite using a relay antenna of at least 2.0G power (such as the HG-5R or HG-55R antenna) and place it into stationary orbit around @/homeworld.
    completedMessage = Success! The relay satellite is up and running.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    // minExpiry = 5.0
    // maxExpiry = 100.0
    deadline = 300 // days
    prestige = Trivial

    maxCompletions = 2
    maxSimultaneous = 1

    rewardScience = 0.0
    rewardReputation = 10.0
    rewardFunds = 36000.0
    failureReputation = 2.0
    failureFunds = 10000.0
    advanceFunds = 18000.0

    targetBody = @/homeworld

    DATA
	{
		type = CelestialBody
		homeworld = HomeWorld()
	}

    PARAMETER
    {
        name = NewVessel
        type = NewVessel
        // Default:   Launch a new vessel
        //title =
    }

//    PARAMETER
//    {
//        name = HasResourceCapacityEC
//        type = HasResourceCapacity
//
//        // Default:   Resource: <resource>: <quantity_description>
//        //title =
//
//        resource = ElectricCharge
//        minQuantity = 1000.0
//        // maxQuantity = 1000.0
//    }

    PARAMETER
    {
        name = HasResourceEC
        type = HasResource

        // Default:   Resource: <resource>: <quantity_description>
        //title =

        resource = ElectricCharge
        minQuantity = 1000
        // maxQuantity = 1000
    }

    PARAMETER
    {
        name = PartValidation
        type = PartValidation

        // has either of the following
        part = HighGainAntenna5
        part = SYB_Squad_HighGainAntenna
    }

//    PARAMETER
//    {
//        name = AntennaRelayPower
//        type = AntennaRelayPower
//        minRelayPower = 2000000000
//        //maxRelayPower = 
//    }

//    PARAMETER
//    {
//        name = ReachState
//        type = ReachState
//        situation = ORBITING
//    }

    PARAMETER
    {
        name = ReachSpecificOrbit0
        type = ReachSpecificOrbit
        displayNotes = true
        index = 0
        deviationWindow = 3.0

        PARAMETER
        {
            name = Duration
            type = Duration

            duration = 7d

            // The preWaitText sets the text that is displayed when waiting
            preWaitText = Testing time required

            // The waitingText sets the text that is displayed when waiting
            waitingText = Testing is in progress.

            // The completionText is displayed when the timer completes.
            completionText = Tests are complete.

            // The starting condition before the duration starts counting down.  If
            // PARAMETER_COMPLETION or PARAMETER_FAILURE are used, then the usual
            // behaviour of waiting for sibling parameters to be completed is
            // ignored.
            //
            //     CONTRACT_ACCEPTANCE (default)
            //     NEXT_LAUNCH
            //     PARAMETER_COMPLETION
            //     PARAMETER_FAILURE
            //
            startCriteria = PARAMETER_COMPLETION

            // If the startCriteria is set to PARAMETER_COMPLETION or PARAMETER_FAILURE,
            // the name of the parameter that must be completed to trigger the duration
            // countdown to start.
            parameter = ReachSpecificOrbit0
        }
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // targetBody = Kerbin
            type = STATIONARY
            // altitudeFactor = 0.8

            // ignored for EQUATORIAL, POLAR and STATIONARY.
            inclinationFactor = 0.8

            // The eccentricity of the orbit.  Ignored for all but SYNCHRONOUS.
            eccentricity = 0.0

            deviationWindow = 2.0
        }
    }

    REQUIREMENT // must have already orbited the base targetBody
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        // targetBody = Kerbin (defaults to the contract body)
    }

    REQUIREMENT // must be able to research specific tech, only 1 tech per requirement
    {
        name = CanResearchTech1
        type = CanResearchTech
        tech = basicScience
    }

}