CONTRACT_TYPE
{
    name = SAB_Homeworld_PolarRelay_Tier3

    // Reference to a CONTRACT_GROUP node which supplies additional rules
    // for limiting the number of contracts within a given group.
    group = StockAntennaBalance

    title = Launch a polar tier 3 relay around @StockAntennaBalance:homeworld.
    synopsis = We want you to build a new relay satellite with at least @StockAntennaBalance:relayPowerTier3 G power (such as the RA-15 antenna) and place it into polar orbit around @StockAntennaBalance:homeworld.
    completedMessage = Success! The relay satellite is up and running around @StockAntennaBalance:homeworld.
    notes = Please note that this must be a new relay satellite, constructed after the contract is accepted.

    // use "description" or "topic/subject/motiviation"
    //description = Put XYZ into KEO
    topic = relay satellite
    subject = generic
    motivation = generic

    // cancellable = true
    // declinable = true
    // minExpiry = 5.0
    // maxExpiry = 100.0
    deadline = Random(150,180) // days
    prestige = Trivial

    maxCompletions = 20
    maxSimultaneous = Min(1, @maxCompletions/2)

    rewardScience = 0.0
    rewardReputation = 25.0
    rewardFunds = 96000.0 // overbuilt vessel is about 36k
    failureReputation = 8.0
    failureFunds = 40000.0
    advanceFunds = 36000.0

    targetBody = @StockAntennaBalance:homeworld

    DATA
    {
        type = List<Vessel>
		requiredValue = false
        relayVessels = AllVessels().Where(v => (v.VesselType() == Relay) && (v.CelestialBody() == @targetBody) && (v.IsOrbiting()))
    }

    PARAMETER
    {
        name = NewVessel
        type = NewVessel
        // Default:   Launch a new vessel
        title = Launch a new relay satellite
    }

    PARAMETER
    {
        name = HasResourceCapacityEC
        type = HasResourceCapacity

        // Default:   Resource: <resource>: <quantity_description>
        title = Have at least @minQuantity electric charge (EC) storage

        resource = ElectricCharge
        minQuantity = 10000.0 // assumes 10.5 EC/sec @ 1000km Ap/Pe + 10%
        // maxQuantity = 1000.0
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
        title = Place satellite into a stable orbit for @duration

        duration = 60d

        dissassociateVesselsOnContractCompletion = true
        dissassociateVesselsOnContractCompletion = true

        PARAMETER
        {
            name = VesselIsType
            type = VesselIsType
            vesselType = Relay
        }

        PARAMETER
        {
            name = PartValidationSAS
            type = PartValidation

            // has either of the following
            partModule = ModuleSAS
        }

        PARAMETER
        {
            name = PartValidationCommand
            type = PartValidation
            partModule = ModuleCommand    
        }

        PARAMETER
        {
            name = AntennaRelayPower
            type = HasAntenna
            title = Have at least @StockAntennaBalance:relayPowerTier3 G (combined) relay antenna power
            antennaType = RELAY
            minAntennaPower = @StockAntennaBalance:relayPowerTier3 * 1000000000
            //maxAntennaPower = 
        }

        PARAMETER
        {
            name = HasResourceEC
            type = HasResource

            // Default:   Resource: <resource>: <quantity_description>
            title = Maintain at least @minQuantity electric charge

            resource = ElectricCharge
            minQuantity = @/HasResourceCapacityEC/minQuantity * 0.1
            // maxQuantity = 1000
        }

        PARAMETER
        {
            name = ReachSpecificOrbit0
            type = ReachSpecificOrbit
            title = Reach orbit with minimal deviation
            displayNotes = true
            index = 0
            deviationWindow = @StockAntennaBalance:deviationWindowPolar
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState
            title = Must not be under acceleration
            maxAcceleration = 0.1
        }
    }

    DATA // Pe (in meters) of at least 15km above surface, plus space altitude threshold x1.10-1.50
    {
        type = double
        requiredValue = true
        orbitPe =  15000 + (HomeWorld().SpaceAltitudeThreshold() * Random(1.00,1.50)) + HomeWorld().Radius()
    }

    DATA // Ap of 75%-95% of SoI size (in meters)
    {
        type = double
        requiredValue = true
        orbitAp = HomeWorld().SphereOfInfluence() * Random(0.75,0.95) + HomeWorld().Radius()
    }

    DATA // Max Ap of 75Mm
    {
        type = double
        requiredValue = true
        orbitApAdjusted = Min(75000000 * Random(0.90,1.00), @orbitAp)
    }

    DATA // LPE is 270 for north polar, 90 for south polar
    {
        type = double
        requiredValue = true
        longitudeOfPeriapsis = [ 90, 270 ].Random() * Random(0.98,1.02)
    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with some randomization
        FIXED_ORBIT
        {
            ORBIT
            {
                SMA = (@/orbitPe + @/orbitApAdjusted) / 2
                ECC = 1 - (2 / ((@/orbitApAdjusted / @/orbitPe) + 1))
                INC = Random(87.0,89.5)
                LPE = @/longitudeOfPeriapsis
                LAN = Random(0,360) // 0-360
                MNA = 0 // does not matter
                EPH = 0 // does not matter
                REF = 1 // gets overriden by targetBody
            }

			//ORBIT // SAMPLE: 90km Pe 75000km Ap Polar
			//{
			//	SMA = 38133804.347382933
			//	ECC = 0.98190543379827511
			//	INC = 87.999568320622771
			//	LPE = 271.68175757553564
			//	LAN = 104.84650645525329
			//	MNA = -3.1415465199262655
			//	EPH = 465134.65376860212
			//	REF = 1
			//}            
        }
    }

    BEHAVIOUR
    {
        name = TrackCompletions
        type = Expression
        CONTRACT_COMPLETED_SUCCESS
        {
            // Multiple expressions may be supplied in one node
            CCSABHomePolarRelay = $CCSABHomePolarRelay + 1
        }
    }

    REQUIREMENT
    {
        name = HaveCompleted
        type = Expression
        title = Have completed at least 2 home stationary relay contracts
        expression = CCSABHomeStationaryRelay >= 2
    }
    
    REQUIREMENT // must have already orbited the base targetBody
    {
        name = Orbit
        type = Orbit
        // checkType = // not specified, so either manned or unmanned will count
        // targetBody = Kerbin (defaults to the contract body)
    }

    REQUIREMENT // must be have researched tech
    {
        name = TechResearched
        type = TechResearched
        tech = electronics // RA-15
    }

    REQUIREMENT
    {
        name = AllHigherTechsNotYetResearched
        type = All
        title = No higher level relay antennas are unlocked

        REQUIREMENT
        {
            name = TechNotYetResearchedRA100
            type = TechResearched
            invertRequirement = true
            tech = automation // RA-100 unlocked
        }
    }
}